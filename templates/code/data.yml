---
guidelines:

  HTML:
    HTML Principles:
      Standalone:
      - HTML itself should work without CSS and JavaScript. The content should be
          accessible, form should be able to submited.
      - Disable images, CSS and JavaScript to check if it works.

      Semantics:
      - Use semantics elements (`-article-`, `-aside-`, `-figure-`, `-figcaption-`,
          `-header-`, `-footer-`, `-main-`, `-nav-`, `-section-`) instead of generic
          elements (`-div-`, `-span-`).
      - Not sure which element to use? http://html5bot.webflow.io/

      Document outline:
      - https://www.smashingmagazine.com/2011/08/html5-and-the-document-outlining-algorithm
      - http://html5doctor.com/outlines/
      - https://bitsofco.de/document-outlines-in-html-5-1/
      - https://css-tricks.com/document-outline-dilemma/
      - Check outline
      - https://gsnedders.html5.org/outliner/

      Inline styles: Avoid inline styles or event handlers

      Indentation:
      - Use 2 spaces for indentation. This is the only way to guarantee code renders
          the same in any environment.
      - M-html-indentation

      Attribute order: 
      - | 
        "HTML attributes should come in this order for easier reading:"
        `-class-`
        `-id, name-` 
        `-data-*-` 
        `-src, for, type, href, value-` 
        `-title, alt,
        role, aria-*-`
      - Classes are used most often, so they come first. Ids are more specific and
          should be used sparingly, for in-page bookmarks, so they come second.
      - M-html-attr

      Classes:
      - + Always use lower case.
      - + The classes used for javaScript must start with `-js--`.
      - M-html-classes

      Comments:
      - "Don't use HTML comments, because: "
      - + HTML comments should be visible only for developer.
      - + HTML comments increase file size.
      - 'Use comments in backend/templating language:'
      - M-html-comments-1
      - M-html-comments-2

    HTML Tools:

      Starter framework:
      - 'Startpoint: https://github.com/ganlanyuan/startpoint'

      Templating engine: 
      - 'Nunjucks:'
      - https://mozilla.github.io/nunjucks
      - https://mozilla.github.io/nunjucks/templating.html
      - https://mozilla.github.io/nunjucks/api.html

  CSS:

    CSS Principles:
      Syntax:
      - Use 2 spaces for indentation
      - Keep each selector to a single line when use group selector
      - One space after selector
      - One space after `-:-` for each declaration
      - S-syntax-space
      - Each declaration should appear on its own line
      - End all declaration with a semi-colon
      - Quote attribute values in selector, `-[type="text"]-`
      - Avoid specifying units for zero values
      - Use meaningful class names and IDs
      - Avoid absolute positioning
      - Avoid !important
      - Don't use breaks <br> just to make space in your layout
      - Avoid hacks unless there is no other way to achieve what you want

      declaration order:
      - |
        Related property declaration should be grouped together following the order
        `-Box-` (display, float, position, left, top, width, height and so on)
        `-Border & Background-`
        `-Text-` (font-family, font-size, text-transform, letter-spacing and so on)
        `-Other-`
      - S-declaration-order

      media query placement:
      - Place media queries close to their relevant rule sets. Don't bundle them all in a separate stylesheet or at the end of the document. 
      - S-media-query-placement

      multi-lines vs single-line:
      - If a rule set includes only one declaration, put it in a signle line, otherwise, declarations should be split to separate lines.
      - S-single-declaration

      Selectors:
      - Use classes over element tag
      - Lowercase only
      - Hyphen over underscore
      - S-selectors-lowercase-hyphen
      - Keep selectors short (less than 3)
      - Take out unnecessary selector
      - S-selectors-unnecessary-selector
      - Avoid overriding styles
      - S-selectors-overriding-styles

      Further reading:
      - http://cssguidelin.es/

    CSS Methodology: 
    - 'SMACSS: https://smacss.com/'
    - 'BEM: https://en.bem.info/method/'
    - 'OOCSS: http://oocss.org/'
    - 'ITCSS: https://speakerdeck.com/dafed/managing-css-projects-with-itcss'

    CSS Tools:

      Preprocessor: 
      - 'SASS: '
      - http://sass-lang.com
      - https://sass-guidelin.es

      CSS Base:
      - 'Normalize:'
      - https://necolas.github.io/normalize.css/
      - 'Reset:'
      - https://github.com/ganlanyuan/startpoint/blob/master/src/scss/base/_reset.scss

      Postprocessors: 
      - https://leaverou.github.io/prefixfree/
      - https://github.com/postcss/autoprefixer

    CSS Frameworks:
      Rocket: https://ganlanyuan.github.io/rocket/

# - **Spaces or Tabs?**
# - **Spacing around rules?**
# - **[Grouping](https://smacss.com/book/formatting#grouping) properties?**

  JavaScript:

    JavaScript Principles:

    JavaScript tools:

      JavaScript framework:

      Polyfills:
        polyfill.io, https://qa.polyfill.io/v2/docs/

      Dependencies:
        go-native, https://github.com/ganlanyuan/go-native

      Test: 
        testcafe, https://devexpress.github.io/testcafe/

    JavaScript Style :

  Media:

    Icons:

      icon font:
      - http://fontawesome.io/
      - http://fontastic.me/

      svg sprites:
      - https://github.com/ganlanyuan/icons
      - https://ganlanyuan.github.io/icons/

    responsive images:
      srcset

    optimize images:
      https://addyosmani.com/blog/image-optimization-tools/

  # Fonts:
    # - **How do you load custom fonts?**
    # - **Do you use any tools to help implement web fonts** *(such as [Font Squirrel](https://www.fontsquirrel.com/), etc)*?
    # - **Do you use a service to manage and serve custom fonts** *(such as [Fonts.com](https://www.fonts.com/), [Typekit](https://typekit.com/), etc)*?

  Performance:
    # - **Do you use performance budgets?** If so, what [metrics](https://timkadlec.com/2014/11/performance-budget-metrics/) are you using to determine budgets? Where are you keeping track of performance budgets?

    measuring project's speed:
    - http://tools.pingdom.com/
    - https://developers.google.com/speed/pagespeed/

    decrease file size:
    - https://css-tricks.com/snippets/htaccess/active-gzip-compression/
    - https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization

    Tools:
    - http://www.webpagetest.org/
    - https://aerotwist.com/blog/bigrig/
    - https://speedcurve.com/

  Accessibility:

    checklist: http://a11yproject.com/checklist.html

    Tools: http://a11yproject.com/resources.html

  Tooling:

    Task runner:
      Gulp: http://gulpjs.com/

    dependency manager:
      Bower: http://bower.io/

    scaffolding tool:
      Yeoman: http://yeoman.io/

    reinforce frontend style:
      Editor Config: http://editorconfig.org/
      linters: https://github.com/CSSLint/csslint

    Container:
      docker: 
      - website https://www.docker.com/
      - download https://store.docker.com/search?offering=community&platform=desktop&q=&type=edition
      - docker image, https://hub.docker.com/r/cmcdev/web/, https://github.com/ganlanyuan/dockerfile

  Version control:
    git: 
    - https://git-scm.com/
    - The code is hosted on https://git.cmcintra.net/
    # - **Do you use a version control workflow** *(such as [gitflow](http://nvie.com/posts/a-successful-git-branching-model/), [centralized](https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow), [feature-branch](https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow), etc)*?
    # - **Who's responsible for managing and governing the version controlled code?**
    # - **Where are issues tracked?**

  Support and Optimization:
    # It's important to recognize the difference between ["support" and "optimization"](http://bradfrost.com/blog/mobile/support-vs-optimization/). You should do your best to support as many environments as possible while simultaneously optimizing for the environments that make the most sense for your business and users. 

    # - **What browsers are you *optimizing* for?** 
    # - **What devices are you *optimizing* for?** 
    # - **Are you using a [graded browser support](https://github.com/yui/yui3/wiki/Graded-Browser-Support) system?**
    # - **Are there specific components that require [more specific grading](https://www.filamentgroup.com/lab/grade-the-components.html)?** 

  Localization:
    different languages:
    # - **Is your website served in different languages?** If so, what considerations do you need to address when localizing for other languages?

  # Deployment/Integration:
    # - **How is your front-end code integrated into a production environment?**

  # Documentation:
    # - **Are you using a [pattern library tool](http://styleguides.io/tools.html) to document your front-end architecture?**
    # - **Where does your documentation live?** What are the links to the documentation?
    # - **Who's responsible for maintaining and governing the documentation?**
    # - **What happens when the guidelines are updated?**

  Further reading:   
  - http://bradfrost.com/blog/post/frontend-guidelines-exercise/  
  - http://www.yellowshoe.com.au/standards  
  - http://codeguide.co/  
  - http://manuals.gravitydept.com/code  
  - https://github.com/bendc/frontend-guidelines/blob/master/README.md